ggplot(aes(x = t, stat = "identity"))+
geom_line(aes(y = IBOV, color = "IBOV"))+
geom_line(aes(y = RBRD11, color = "RBRD11"))+
labs(subtitle = paste("Compra: 08/01/2019","|", "D.U.: ", duRBRD11, "|", mdRBRD11, "(dia)", acRBRD11, "(acum.)", "|", "Ganho : ", gpRBRD11, "|", "Sharpe : ", isRBRD11, sep=" "), title = "Comparativo RBRD11 vs Ibovespa", x = "Período", y = "Posição (R$)")+
scale_colour_manual(name="Legenda",
values=c(IBOV="firebrick1", RBRD11="steelblue"))
#Plotting Equity Curves
tENAT3 <- 1:(length(EbENAT3))
ENAT3_df <- data.frame(ENAT3 = EbENAT3, IBOV = EbENAT3_Ibov, t= tENAT3)
# Sharpe Ratio - based on Returns
SrENAT3 <- rENAT3 %>% dplyr::summarise(avg_return = round(mean(return, na.rm=T), 4), Volatility = sd(return,na.rm=T), Sharper = round(mean(return,na.rm=T) / sd(return,na.rm=T), 4))
duENAT3 <- as.numeric(nrow(rENAT3))
mdENAT3 <- paste(round(100*SrENAT3$avg_return,2), "%", sep="")
isENAT3 <- SrENAT3$Sharper
acENAT3 <- paste(round(100*as.numeric(rENAT3[nrow(rENAT3),4]),2), "%", sep="")
gpENAT3 <- round(EbENAT3[length(EbENAT3)] - EbENAT3[1],2)
ENAT3_df %>%
ggplot(aes(x = t, stat = "identity"))+
geom_line(aes(y = IBOV, color = "IBOV"))+
geom_line(aes(y = ENAT3, color = "ENAT3"))+
labs(subtitle = paste("Compra: 06/02/2019","|", "D.U.: ", duENAT3, "|", mdENAT3, "(dia)", acENAT3, "(acum.)", "|", "Ganho : ", gpENAT3, "|", "Sharpe : ", isENAT3, sep=" "), title = "Comparativo ENAT3 vs Ibovespa", x = "Período", y = "Posição (R$)")+
scale_colour_manual(name="Legenda",
values=c(IBOV="firebrick1", ENAT3="steelblue"))
#Plotting Equity Curves
tCARD3 <- 1:(length(EbCARD3))
CARD3_df <- data.frame(CARD3 = EbCARD3, IBOV = EbCARD3_Ibov, t= tCARD3)
# Sharpe Ratio - based on Returns
SrCARD3 <- rCARD3 %>% dplyr::summarise(avg_return = round(mean(return, na.rm=T), 4), Volatility = sd(return,na.rm=T), Sharper = round(mean(return,na.rm=T) / sd(return,na.rm=T), 4))
duCARD3 <- as.numeric(nrow(rCARD3))
mdCARD3 <- paste(round(100*SrCARD3$avg_return,2), "%", sep="")
isCARD3 <- SrCARD3$Sharper
acCARD3 <- paste(round(100*as.numeric(rCARD3[nrow(rCARD3),4]),2), "%", sep="")
gpCARD3 <- round(EbCARD3[length(EbCARD3)] - EbCARD3[1],2)
CARD3_df %>%
ggplot(aes(x = t, stat = "identity"))+
geom_line(aes(y = IBOV, color = "IBOV"))+
geom_line(aes(y = CARD3, color = "CARD3"))+
labs(subtitle = paste("Compra: 07/02/2019","|", "D.U.: ", duCARD3, "|", mdCARD3, "(dia)", acCARD3, "(acum.)", "|", "Ganho : ", gpCARD3, "|", "Sharpe : ", isCARD3, sep=" "), title = "Comparativo CARD3 vs Ibovespa", x = "Período", y = "Posição (R$)")+
scale_colour_manual(name="Legenda",
values=c(IBOV="firebrick1", CARD3="steelblue"))
#Plotting Equity Curves
tLINX3 <- 1:(length(EbLINX3))
LINX3_df <- data.frame(LINX3 = EbLINX3, IBOV = EbLINX3_Ibov, t= tLINX3)
# Sharpe Ratio - based on Returns
SrLINX3 <- rLINX3 %>% dplyr::summarise(avg_return = round(mean(return, na.rm=T), 4), Volatility = sd(return,na.rm=T), Sharper = round(mean(return,na.rm=T) / sd(return,na.rm=T), 4))
duLINX3 <- as.numeric(nrow(rLINX3))
mdLINX3 <- paste(round(100*SrLINX3$avg_return,2), "%", sep="")
isLINX3 <- SrLINX3$Sharper
acLINX3 <- paste(round(100*as.numeric(rLINX3[nrow(rLINX3),4]),2), "%", sep="")
gpLINX3 <- round(EbLINX3[length(EbLINX3)] - EbLINX3[1],2)
LINX3_df %>%
ggplot(aes(x = t, stat = "identity"))+
geom_line(aes(y = IBOV, color = "IBOV"))+
geom_line(aes(y = LINX3, color = "LINX3"))+
labs(subtitle = paste("Compra: 11/02/2019","|", "D.U.: ", duLINX3, "|", mdLINX3, "(dia)", acLINX3, "(acum.)", "|", "Ganho : ", gpLINX3, "|", "Sharpe : ", isLINX3, sep=" "), title = "Comparativo LINX3 vs Ibovespa", x = "Período", y = "Posição (R$)")+
scale_colour_manual(name="Legenda",
values=c(IBOV="firebrick1", LINX3="steelblue"))
#Plotting Equity Curves
tWEGE3 <- 1:(length(EbWEGE3))
WEGE3_df <- data.frame(WEGE3 = EbWEGE3, IBOV = EbWEGE3_Ibov, t= tWEGE3)
# Sharpe Ratio - based on Returns
SrWEGE3 <- rWEGE3 %>% dplyr::summarise(avg_return = round(mean(return, na.rm=T), 4), Volatility = sd(return,na.rm=T), Sharper = round(mean(return,na.rm=T) / sd(return,na.rm=T), 4))
duWEGE3 <- as.numeric(nrow(rWEGE3))
mdWEGE3 <- paste(round(100*SrWEGE3$avg_return,2), "%", sep="")
isWEGE3 <- SrWEGE3$Sharper
acWEGE3 <- paste(round(100*as.numeric(rWEGE3[nrow(rWEGE3),4]),2), "%", sep="")
gpWEGE3 <- round(EbWEGE3[length(EbWEGE3)] - EbWEGE3[1],2)
WEGE3_df %>%
ggplot(aes(x = t, stat = "identity"))+
geom_line(aes(y = IBOV, color = "IBOV"))+
geom_line(aes(y = WEGE3, color = "WEGE3"))+
labs(subtitle = paste("Compra: 11/02/2019","|", "D.U.: ", duWEGE3, "|", mdWEGE3, "(dia)", acWEGE3, "(acum.)", "|", "Ganho : ", gpWEGE3, "|", "Sharpe : ", isWEGE3, sep=" "), title = "Comparativo WEGE3 vs Ibovespa", x = "Período", y = "Posição (R$)")+
scale_colour_manual(name="Legenda",
values=c(IBOV="firebrick1", WEGE3="steelblue"))
#Plotting Equity Curves
tITSA4 <- 1:(length(EbITSA4))
ITSA4_df <- data.frame(ITSA4 = EbITSA4, IBOV = EbITSA4_Ibov, t= tITSA4)
# Sharpe Ratio - based on Returns
SrITSA4 <- rITSA4 %>% dplyr::summarise(avg_return = round(mean(return, na.rm=T), 4), Volatility = sd(return,na.rm=T), Sharper = round(mean(return,na.rm=T) / sd(return,na.rm=T), 4))
duITSA4 <- as.numeric(nrow(rITSA4))
mdITSA4 <- paste(round(100*SrITSA4$avg_return,2), "%", sep="")
isITSA4 <- SrITSA4$Sharper
acITSA4 <- paste(round(100*as.numeric(rITSA4[nrow(rITSA4),4]),2), "%", sep="")
gpITSA4 <- round(EbITSA4[length(EbITSA4)] - EbITSA4[1],2)
ITSA4_df %>%
ggplot(aes(x = t, stat = "identity"))+
geom_line(aes(y = IBOV, color = "IBOV"))+
geom_line(aes(y = ITSA4, color = "ITSA4"))+
labs(subtitle = paste("Compra: 11/02/2019","|", "D.U.: ", duITSA4, "|", mdITSA4, "(dia)", acITSA4, "(acum.)", "|", "Ganho : ", gpITSA4, "|", "Sharpe : ", isITSA4, sep=" "), title = "Comparativo ITSA4 vs Ibovespa", x = "Período", y = "Posição (R$)")+
scale_colour_manual(name="Legenda",
values=c(IBOV="firebrick1", ITSA4="steelblue"))
#Plotting Equity Curves
tBRSR6 <- 1:(length(EbBRSR6))
BRSR6_df <- data.frame(BRSR6 = EbBRSR6, IBOV = EbBRSR6_Ibov, t= tBRSR6)
# Sharpe Ratio - based on Returns
SrBRSR6 <- rBRSR6 %>% dplyr::summarise(avg_return = round(mean(return, na.rm=T), 4), Volatility = sd(return,na.rm=T), Sharper = round(mean(return,na.rm=T) / sd(return,na.rm=T), 4))
duBRSR6 <- as.numeric(nrow(rBRSR6))
mdBRSR6 <- paste(round(100*SrBRSR6$avg_return,2), "%", sep="")
isBRSR6 <- SrBRSR6$Sharper
acBRSR6 <- paste(round(100*as.numeric(rBRSR6[nrow(rBRSR6),4]),2), "%", sep="")
gpBRSR6 <- round(EbBRSR6[length(EbBRSR6)] - EbBRSR6[1],2)
BRSR6_df %>%
ggplot(aes(x = t, stat = "identity"))+
geom_line(aes(y = IBOV, color = "IBOV"))+
geom_line(aes(y = BRSR6, color = "BRSR6"))+
labs(subtitle = paste("Compra: 19/02/2019","|", "D.U.: ", duBRSR6, "|", mdBRSR6, "(dia)", acBRSR6, "(acum.)", "|", "Ganho : ", gpBRSR6, "|", "Sharpe : ", isBRSR6, sep=" "), title = "Comparativo BRSR6 vs Ibovespa", x = "Período", y = "Posição (R$)")+
scale_colour_manual(name="Legenda",
values=c(IBOV="firebrick1", BRSR6="steelblue"))
#Plotting Equity Curves
tFESA4 <- 1:(length(EbFESA4))
FESA4_df <- data.frame(FESA4 = EbFESA4, IBOV = EbFESA4_Ibov, t= tFESA4)
# Sharpe Ratio - based on Returns
SrFESA4 <- rFESA4 %>% dplyr::summarise(avg_return = round(mean(return, na.rm=T), 4), Volatility = sd(return,na.rm=T), Sharper = round(mean(return,na.rm=T) / sd(return,na.rm=T), 4))
duFESA4 <- as.numeric(nrow(rFESA4))
mdFESA4 <- paste(round(100*SrFESA4$avg_return,2), "%", sep="")
isFESA4 <- SrFESA4$Sharper
acFESA4 <- paste(round(100*as.numeric(rFESA4[nrow(rFESA4),4]),2), "%", sep="")
gpFESA4 <- round(EbFESA4[length(EbFESA4)] - EbFESA4[1],2)
FESA4_df %>%
ggplot(aes(x = t, stat = "identity"))+
geom_line(aes(y = IBOV, color = "IBOV"))+
geom_line(aes(y = FESA4, color = "FESA4"))+
labs(subtitle = paste("Compra: 20/02/2019","|", "D.U.: ", duFESA4, "|", mdFESA4, "(dia)", acFESA4, "(acum.)", "|", "Ganho : ", gpFESA4, "|", "Sharpe : ", isFESA4, sep=" "), title = "Comparativo FESA4 vs Ibovespa", x = "Período", y = "Posição (R$)")+
scale_colour_manual(name="Legenda",
values=c(IBOV="firebrick1", FESA4="steelblue"))
#Plotting Equity Curves
tTRPL4 <- 1:(length(EbTRPL4))
TRPL4_df <- data.frame(TRPL4 = EbTRPL4, IBOV = EbTRPL4_Ibov, t= tTRPL4)
# Sharpe Ratio - based on Returns
SrTRPL4 <- rTRPL4 %>% dplyr::summarise(avg_return = round(mean(return, na.rm=T), 4), Volatility = sd(return,na.rm=T), Sharper = round(mean(return,na.rm=T) / sd(return,na.rm=T), 4))
duTRPL4 <- as.numeric(nrow(rTRPL4))
mdTRPL4 <- paste(round(100*SrTRPL4$avg_return,2), "%", sep="")
isTRPL4 <- SrTRPL4$Sharper
acTRPL4 <- paste(round(100*as.numeric(rTRPL4[nrow(rTRPL4),4]),2), "%", sep="")
gpTRPL4 <- round(EbTRPL4[length(EbTRPL4)] - EbTRPL4[1],2)
TRPL4_df %>%
ggplot(aes(x = t, stat = "identity"))+
geom_line(aes(y = IBOV, color = "IBOV"))+
geom_line(aes(y = TRPL4, color = "TRPL4"))+
labs(subtitle = paste("Compra: 19/03/2019","|", "D.U.: ", duTRPL4, "|", mdTRPL4, "(dia)", acTRPL4, "(acum.)", "|", "Ganho : ", gpTRPL4, "|", "Sharpe : ", isTRPL4, sep=" "), title = "Comparativo TRPL4 vs Ibovespa", x = "Período", y = "Posição (R$)")+
scale_colour_manual(name="Legenda",
values=c(IBOV="firebrick1", TRPL4="steelblue"))
dev.off()
#pacotes utilizados nesse algorítmo
library(tidyquant, warn.conflicts = F)
library(PortfolioAnalytics, warn.conflicts = F)
library(timetk, warn.conflicts = F)
library(ROI, warn.conflicts = F)
library(ROI.plugin.glpk, warn.conflicts = F)
library(ROI.plugin.quadprog, warn.conflicts = F)
# Remove todos os objetos que foram criados
rm(list = ls())
gc()
# Retira a notação científica dos gráficos
options(scipen = 999)
#ativos selecionados
#tickers <- c("ENBR3.SA","WEGE3.SA","ODPV3.SA","VIVT4.SA","BRSR6.SA","ALUP4.SA") #Portfolio A
#tickers <- c("SAPR4.SA","PSSA3.SA","MOVI3.SA","MRVE3.SA","MGLU3.SA","TRPL4.SA") #Portfolio B
#tickers <- c("BRSR6.SA","FESA4.SA","ITSA4.SA","MRVE3.SA","VIVT4.SA","TRPL4.SA") #Portfolio C
#tickers <- c("EGIE3.SA", "WEGE3.SA", "BBDC4.SA", "JBSS3.SA", "EQTL3.SA", "CCRO3.SA", "NATU3.SA")
tickers <- c("BRSR6.SA","ABCB4.SA","CPLE6.SA","PETR4.SA","CSNA3.SA","FESA4.SA")
#definindo o periodo historico de 5 anos para as cotações
from <- today() - years(5)
#acessando os dados de cotações
stocks_data <- tq_get(tickers, get = "stock.prices", from = from)
#retira todos ou alguns dados ausentes 'NAs'
stocks_data <- stocks_data[complete.cases(stocks_data),]
#configurando o diretório de trabalho
setwd(file.path("D://Marcos//BD_Acoes//Robôs//Portfolio"))
# Cria pdf
pdf('portfolio.pdf')
#Analise dos precos historicos
stocks_data %>%
ggplot(aes(date, close, color = symbol)) +
geom_line() +
ggtitle("Histórico de Preços") +
theme_tq()
stocks_data %>%
ggplot(aes(date, close, color = symbol)) +
geom_line() +
geom_smooth(method = "loess") +
ggtitle("Histórico de Preços") +
theme_tq() +
facet_wrap(~ symbol, ncol = 2, scales = "free_y")
stocks_data %>%
ggplot(aes(date)) +
geom_bar(aes(date, volume / 1000000, color = symbol), stat = "identity") +
ggtitle("Volume operado em milhões de ações") +
theme_tq() +
facet_wrap(~ symbol, ncol = 2)
#retorno diario
stocks_data <- stocks_data %>%
group_by(symbol) %>%
tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = "log",
col_rename = "returns")
stocks_data <- stocks_data %>%
group_by(symbol) %>%
tq_mutate(select = returns,
mutate_fun = runSum,
n = 1,
cumulative = T,
col_rename = "returns_cumulative")
#Weighting and Optimization
stocks_data_returns <- stocks_data %>%
select(date, symbol, returns) %>%
spread(key = symbol, value = returns) %>%
tk_ts(frequency = 1, silent = T, start = min(stocks_data$date))
#define quais ações irão compor o portfolio
p <- portfolio.spec(assets = colnames(stocks_data_returns))
#define que os pesos definidos devem totalizar 1
p <- add.constraint(portfolio = p,
type = "full_investment")
#define que será assumida apenas a posição comprada nas ações
p <- add.constraint(portfolio = p,
type = "long_only")
#define um alvo de retorno de 20%
#p <- add.constraint(portfolio=p, type = "return", return_target= 0.20)
#define que o objetivo será o menor risco
p <- add.objective(portfolio = p,
type = "risk",
name = "var")
#define que o objetivo será o maior retorno
p <- add.objective(portfolio = p,
type = "return",
name = "mean")
#define que o objetivo sera minimizar perda "expected tail loss'
p <-  add.objective(portfolio = p,
type = "risk_budget",
name = "ETL",
arguments = list(p = 0.95), #intervalo de confianca para minimizacao de perda
max_prisk = 0.3) #nenhuma acao deve ser responsavel por mais de 30% do risco
#visualiza o conjunto de criterios e objetivos escolhidos
print(p)
#realiza a otimização de pesos de acordo com os criterios e objetivos escolhidos
opt <- optimize.portfolio(R = stocks_data_returns,
portfolio = p,
optimize_method = "ROI",
trace = T)
opt
weights1 <- opt$weights
weights2 <- opt$weights
weights3 <- opt$weights
weights4 <- opt$weights
weights5 <- opt$weights
weights6 <- opt$weights
#insira neste trecho os pesos adquiridos para comparacao dos Portfolios
weights <- c(
weights1,
weights2,
weights3,
weights4,
weights5,
weights6
)
#cria uma tabela relacionado os pesos e o numero de portfolio a ser criado
weights_table <-  tibble(tickers) %>%
tq_repeat_df(n = 3) %>%
bind_cols(tibble(weights)) %>%
group_by(portfolio)
#constroi o portfolio de acordo com a tabela de pesos
portfolio_returns <- stocks_data %>%
tq_repeat_df(n = 3) %>%
tq_portfolio(assets_col  = symbol,
returns_col = returns,
weights     = weights_table,
col_rename  = "returns")
#calcula o retorno acumulado dos portfolios
portfolio_returns <- portfolio_returns %>%
group_by(portfolio) %>%
tq_mutate(select = returns,
mutate_fun = runSum,
n = 1,
cumulative = T,
col_rename = "returns_cumulative")
#compara o retorno acumulado dos portfolios
portfolio_returns %>%
ungroup %>%
mutate( portfolio = as.factor(portfolio) ) %>%
ggplot(aes(x = date)) +
geom_line(aes(x = date, y = returns_cumulative, color = portfolio)) +
theme_tq() +
facet_wrap(~ portfolio, ncol = 1)
dev.off()
### Script criado por Marcos Assis
### Finalidade:
###   Obter as cotações de ativos negociados na B3 em linguage R.
###   Calcular os retornos médios e as volatilidades dos ativos
###   Gerar um arquivo PDF do gráfico do Risco x Retorno dos ativos
### Nome do script: VolCot.R
### Pacotes que serão necessários para os gráficos e depois para manipular os dados
library(rvest) # for scraping
library(tidyverse) # blanket import for core tidyverse packages
library(ggthemes)
library(tidyquant) # for tidy financial analysis
library(janitor) # tidy data cleaning functions
# Remove todos os objetos que foram criados e limpa a memória com a função gc()
rm(list = ls())
gc()
# Variável contendo o local do diretório de trabalho
path_app <- "D:\Marcos\Developer\Aplicações\Linguagem R\scripts\Risco e Retorno de Ativos"
# Configurando o diretório de trabalho
setwd(file.path(path_app))
# Oculta os warnings
options("getSymbols.warning4.0" = F,
"getSymbols.auto.assign" = F)
# Ativos para serem analisados
ativos <- c("petr4",
"wege3",
"mrve3",
"card3",
"enat3",
"itsa4",
"vivt4",
"fesa4",
"linx3",
"brsr6",
"trpl4",
"pssa3",
"egie3",
"timp3",
"prio3",
"beef3",
"movi3",
"b3sa3",
"lcam3",
"mglu3",
"flry3",
"tgma3",
"csan3",
"sapr4",
"grnd3",
"cmig4",
"slce3",
"ecor3",
"usim5",
"alup4",
"fras3",
"enbr3",
"hype3",
"mypk3",
"odpv3",
"goau4",
"taee11")
# Busca os dados de todas as ações do vetor ativos
getSymbols(paste(ativos, ".sa", sep=""), auto.assign=TRUE)
# Cria um vetor somente com códigos válidos de ações negociadas na bolsa
tickers <- ls(pattern= ".SA", all.names = TRUE)
# Cria um data frame com todos os ativos válidos e suas respectivas cotações
tickers_df <- tq_get(tickers, na.rm = TRUE)
# Calcula o retorno diário dos ativos
daily_sector = tickers_df %>% group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "daily") %>%
ungroup()
# Renomeia o cabeçalho do objeto
names(daily_sector)[3] <- "return"
# Seleciona apenas as colunas necessárias
return_and_vol <- select(daily_sector, symbol, return) %>% mutate(return = return * 100)
# Calcula o retorno médio e a volatilade dos ativos
return_and_vol <- group_by(return_and_vol, symbol) %>%
dplyr::summarise(avg_return = round(mean(return), 2), Volatility = round(sd(return) * 100,2), Sharper = round((mean(return) / sd(return)) * 100, 2)) %>%
arrange(desc(avg_return), desc(Volatility), desc(Sharper)) %>%
as.data.frame()
# Cria pdf
pdf('isharpe_cot.pdf')
# Gera o gráfico dos ativos de maior retorno
return_and_vol %>% ggplot(aes(reorder(symbol, -avg_return), avg_return, fill = avg_return))+
geom_col()+
coord_flip()+
labs(title = "Rentabilidade", x = "Papéis", y = "Retorno médio")+
theme_classic()+
theme(legend.position="none")
# Gera o gráfico do índice sharper dos ativos
new_return_and_vol <- return_and_vol %>% arrange(desc(Sharper))
new_return_and_vol %>% ggplot(aes(x = reorder(symbol, -Sharper), y = Sharper, fill = Sharper))+
geom_col()+
coord_flip()+
labs(title = "", x = "Papéis", y = "Índice Sharpe")+
theme_classic()+
theme(legend.position="none")
# Gera o gráfico que relaciona o retorno médio e a volatilidade de cada ativo
plot = return_and_vol %>% ggplot(aes(avg_return, Volatility))+
geom_text(aes(label = symbol), size = 3)+
labs(title = "Índice Sharpe", x = "Retorno", y = "Risco", subtitle = "Fonte: Yahoo Finance")+
theme_minimal()
plot
dev.off()
# Renomeia os cabeçalhos do objeto
names(new_return_and_vol)[2] <- "avg"
names(new_return_and_vol)[3] <- "vol"
names(new_return_and_vol)[4] <- "isharpe"
# Retira o sufixo '.SA' do ticker dos ativos
new_return_and_vol$symbol <- str_replace(new_return_and_vol$symbol,".SA$","")
# Salva o resultado em arquivo CSV
write.csv(new_return_and_vol,paste(path_app, "isharpe_cot.csv", sep = ""), row.names = FALSE)
### Script criado por Marcos Assis
### Finalidade:
###   Obter as cotações de ativos negociados na B3 em linguage R.
###   Calcular os retornos médios e as volatilidades dos ativos
###   Gerar um arquivo PDF do gráfico do Risco x Retorno dos ativos
### Nome do script: VolCot.R
### Pacotes que serão necessários para os gráficos e depois para manipular os dados
library(rvest) # for scraping
library(tidyverse) # blanket import for core tidyverse packages
library(ggthemes)
library(tidyquant) # for tidy financial analysis
library(janitor) # tidy data cleaning functions
# Remove todos os objetos que foram criados e limpa a memória com a função gc()
rm(list = ls())
gc()
# Variável contendo o local do diretório de trabalho
path_app <- "D://Marcos//Developer//Aplicações//Linguagem R//scripts//Risco e Retorno de Ativos"
# Configurando o diretório de trabalho
setwd(file.path(path_app))
# Oculta os warnings
options("getSymbols.warning4.0" = F,
"getSymbols.auto.assign" = F)
# Ativos para serem analisados
ativos <- c("petr4",
"wege3",
"mrve3",
"card3",
"enat3",
"itsa4",
"vivt4",
"fesa4",
"linx3",
"brsr6",
"trpl4",
"pssa3",
"egie3",
"timp3",
"prio3",
"beef3",
"movi3",
"b3sa3",
"lcam3",
"mglu3",
"flry3",
"tgma3",
"csan3",
"sapr4",
"grnd3",
"cmig4",
"slce3",
"ecor3",
"usim5",
"alup4",
"fras3",
"enbr3",
"hype3",
"mypk3",
"odpv3",
"goau4",
"taee11")
# Busca os dados de todas as ações do vetor ativos
getSymbols(paste(ativos, ".sa", sep=""), auto.assign=TRUE)
# Cria um vetor somente com códigos válidos de ações negociadas na bolsa
tickers <- ls(pattern= ".SA", all.names = TRUE)
# Cria um data frame com todos os ativos válidos e suas respectivas cotações
tickers_df <- tq_get(tickers, na.rm = TRUE)
# Calcula o retorno diário dos ativos
daily_sector = tickers_df %>% group_by(symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "daily") %>%
ungroup()
# Renomeia o cabeçalho do objeto
names(daily_sector)[3] <- "return"
# Seleciona apenas as colunas necessárias
return_and_vol <- select(daily_sector, symbol, return) %>% mutate(return = return * 100)
# Calcula o retorno médio e a volatilade dos ativos
return_and_vol <- group_by(return_and_vol, symbol) %>%
dplyr::summarise(avg_return = round(mean(return), 2), Volatility = round(sd(return) * 100,2), Sharper = round((mean(return) / sd(return)) * 100, 2)) %>%
arrange(desc(avg_return), desc(Volatility), desc(Sharper)) %>%
as.data.frame()
# Cria pdf
pdf('isharpe_cot.pdf')
# Gera o gráfico dos ativos de maior retorno
return_and_vol %>% ggplot(aes(reorder(symbol, -avg_return), avg_return, fill = avg_return))+
geom_col()+
coord_flip()+
labs(title = "Rentabilidade", x = "Papéis", y = "Retorno médio")+
theme_classic()+
theme(legend.position="none")
# Gera o gráfico do índice sharper dos ativos
new_return_and_vol <- return_and_vol %>% arrange(desc(Sharper))
new_return_and_vol %>% ggplot(aes(x = reorder(symbol, -Sharper), y = Sharper, fill = Sharper))+
geom_col()+
coord_flip()+
labs(title = "", x = "Papéis", y = "Índice Sharpe")+
theme_classic()+
theme(legend.position="none")
# Gera o gráfico que relaciona o retorno médio e a volatilidade de cada ativo
plot = return_and_vol %>% ggplot(aes(avg_return, Volatility))+
geom_text(aes(label = symbol), size = 3)+
labs(title = "Índice Sharpe", x = "Retorno", y = "Risco", subtitle = "Fonte: Yahoo Finance")+
theme_minimal()
plot
dev.off()
# Renomeia os cabeçalhos do objeto
names(new_return_and_vol)[2] <- "avg"
names(new_return_and_vol)[3] <- "vol"
names(new_return_and_vol)[4] <- "isharpe"
# Retira o sufixo '.SA' do ticker dos ativos
new_return_and_vol$symbol <- str_replace(new_return_and_vol$symbol,".SA$","")
# Salva o resultado em arquivo CSV
write.csv(new_return_and_vol,paste(path_app, "isharpe_cot.csv", sep = ""), row.names = FALSE)
